<?php
// $Id$


/**
 * Implementation of the hook_permissions()
 */
function eventbrite_user_perm() {
  return array('administer personal account');
}

/**
 * Implementation of hook_menu().
 */
function eventbrite_user_menu() {
  $items['user/%/eventbrite'] = array(
    'title' => t('Eventbrite'),
    'description' => t('Configure personal Eventbrite settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['user/%/eventbrite/api'] = array(
    'title' => 'API Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  $items['user/%/eventbrite/payment-settings'] = array(
    'title' => t('Payment Settings'),
    'description' => t('Configure personal Eventbrite settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['user/%/eventbrite/add-venue'] = array(
    'title' => 'Add Venue',
    'description' => 'Add an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/eventbrite/list-venues'] = array(
    'title' => 'List Venues',
    'description' => 'List Eventbrite venues',
    'page callback' => 'eventbrite_ui_venue_list',
//    'page arguments' => array('eventbrite_admin_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  
/*
  $items['admin/settings/eventbrite/add-venue'] = array(
    'title' => 'Add Venue',
    'description' => 'Add an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/eventbrite/list-venues'] = array(
    'title' => 'List Venues',
    'description' => 'List Eventbrite venues',
    'page callback' => 'eventbrite_ui_venue_list',
//    'page arguments' => array('eventbrite_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  */
	/*
	
  $items['eventbrite_ui/events'] = array(
    'title' => t('Eventbrite Events'),
    'page callback' => 'eventbrite_ui_event_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['eventbrite_ui/new-event'] = array(
    'title' => t('Create a new Event'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_ui_event_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['eventbrite_ui/event/%'] = array(
    'title' => 'Single Eventbrite Event',
    'page callback' => 'eventbrite_ui_event',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['eventbrite_ui/event/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  $items['eventbrite_ui/event/%/edit'] = array(
    'title' => 'Edit Event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_ui_event_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  */
  
  return $items;
}
/**
 * Implementation of the hook_user()
 * Add an extra field for the user to enter their Eventbrite user key.
 */
function eventbrite_user_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && (user_access('user personal eventbrite user key'))) {
    if ($category == 'account') {
      $user = user_load(array('uid' => $account->uid));
      $form['eventbrite_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('Eventbrite user settings'),
        '#collapsible' => FALSE,
        '#weight' => 4,
        '#tree' => FALSE,
      );
      $form['eventbrite_user']['eventbrite_user_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Eventbrite user key'),
        '#default_value' => empty($user->eventbrite_user_key) ? '' : $user->eventbrite_user_key,
        '#description' => t('Enter your Eventbrite user key.'),
        '#maxlength' => 64,
      );
      return $form;
    }
  }
  elseif ($op == 'validate') {
    if (!empty($edit['eventbrite_user_key'])) {
      // TODO: validate, check to see if this user can be loaded
      /*
      if (!flickr_user_find_by_identifier($edit['flickr_identifier'])) {
        form_set_error('flickr_identifier', t('%ident is not a valid Flickr username, email, or NSID.', array('%ident' => $edit['flickr_identifier'])));
      }
      */
    }
  }
  elseif ($op == 'insert' || $op == 'update') {
    if (isset($edit['eventbrite_user_key'])) {
      db_query('DELETE FROM {eventbrite_user} WHERE uid = %d', $account->uid);
      $user_affected = db_affected_rows();
      if (!empty($edit['eventbrite_user_key'])) {
        db_query("INSERT INTO {eventbrite_user} (uid, eventbrite_user_key) VALUES (%d, '%s')", $account->uid, $edit['eventbrite_user_key']);
      }
      else if ($user_affected) {
        //flickr account deleted
        drupal_set_message(t("%username's Eventbrite user key has been deleted.", array('%username' => $account->name)));
      }
    }
    $edit['eventbrite_user_key'] = NULL;
  }
  elseif ($op == 'load') {
    $result = db_query('SELECT * FROM {eventbrite_user} WHERE uid = %d', $account->uid);
    if ($eventbrite_user_info = db_fetch_object($result)) {
      $account->eventbrite_user_key = $eventbrite_user_info->eventbrite_user_key;
    }
  }
  elseif ($op == 'delete') {
    db_query('DELETE FROM {eventbrite_user} WHERE uid = %d', $account->uid);
  }
}


function eventbrite_user_default_payment_settings() {
//  $payment_settings_form = eventbrite_ui_payment_settings_form();
//  return system_settings_form($payment_settings_form);
  module_load_include('inc', 'eventbrite_ui', 'eventbrite_ui.forms');
  $form = eventbrite_ui_payment_settings_form();
  
  return $form;
}
