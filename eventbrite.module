<?php
// $Id$

/*
 * Implementation of hook_menu().
 */
function eventbrite_menu() {

  $items['admin/settings/eventbrite'] = array(
    'title' => 'Eventbrite',
    'description' => 'Configure Eventbrite API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/eventbrite.admin.inc',
  );

  return $items;
}

function eventbrite_get($op, $id = NULL) {
  module_load_include('inc', 'eventbrite', 'includes/eventbrite.api');
  switch ($op) {
    case 'user_list_events':
      return _eventbrite_api_get_events();
    case 'event_get':
      if ($id) {
        return _eventbrite_api_get_event($id);
      }
      break;
  }
}

function eventbrite_save($op, $object) {
  module_load_include('inc', 'eventbrite', 'includes/eventbrite.api');
  switch ($op) {
    case 'event_new':
      return _eventbrite_api_event_new($object);
    case 'event_update':
      return _eventbrite_api_event_update($object);
  }
}

/*
 * This is a utility function to manage any errors generated over the page request
 *
 * param 1: $error_msg: a error message string.  '' when this function is being called to get the errors
 * param 2: $error_type: An Eventbrite supplied value used to associate the error with a form element
 */
function _eventbrite_common_errors($error_msg = '', $error_type = '') {
  static $errors;
  if (!isset($errors)) {
    $errors = array();
  }
  if ($error_msg) {
    if ($error_type) {
      $errors[$error_type] = $error_msg;
    }
    else {
      $errors[] = $error_msg;
    }
  }
  return $errors;
}
