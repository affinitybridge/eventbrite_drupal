<?php
// $Id$

/**
 * @file
 * An example to define a simple field, widget, and formatter.
 * A module could define only a field, only a widget, only a 
 * formatter, or any combination. Widgets and formatters must
 * declare what kind of field they work with, which can be any
 * existing field as well as any new field the module creates.
 *
 * Created using the article: http://www.lullabot.com/articles/creating-custom-cck-fields
 */

/**
 * Implementation of hook_init().
 */
function eventbrite_cck_init() {
  drupal_add_css(drupal_get_path('module', 'eventbrite_cck')  .'/eventbrite_cck.css');
}



//==========================================//
// CCK FIELD HOOKS
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function eventbrite_cck_field_info() {
  return array(
    // Defining Eventbrite Event field
    'eventbrite_cck' => array(
      'label' => t('Eventbrite Event'),
      'description' => t('Associate an eventbrite event with a node.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function eventbrite_cck_field_settings($op, $field) {
  switch ($op) {
  	/* 'form' and 'save' ops may not be needed for this field */
    // Create the form element to be used on the field 
    // settings form. Field settings will be the same for 
    // all shared instances of the same field and should 
    // define the way the value will be stored 
    // in the database.
    /*
    case 'form':
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        '#required' => FALSE,
        
        // Use #element_validate to validate the settings.
        '#element_validate' => array('_example_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be a number between 1 and 255'),
      );
      return $form;
    */
    // Return an array of the names of the field settings 
    // defined by this module. These are the items that 
    // CCK will store in the field definition
    // and they will be available in the $field array.
    // This should match the items defined in 'form' above.
    /*
    case 'save':
      return array('max_length');
    */
    // Define the database storage for this field using 
    // the same construct used by schema API. Most fields
    // have only one column, but there can be any number 
    // of different columns. After the schema API values, 
    // add two optional values to each column, 
    //  'views', to define a Views field 
    //  'sortable', to add a Views sort field
    case 'database columns':
      $columns['ebid'] = array(
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 0,
        'sortable' => TRUE, 
        'views' => TRUE,
      );
      return $columns;

    // Optional: Make changes to the default $data array 
    // created for Views. Omit this if no changes are 
    // needed, use it to add a custom handler or make 
    // other changes.
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. The following
      // code illustrates how you would retrieve
      // the necessary data.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_ebid'];

      // Make changes to $data as needed here.

      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function eventbrite_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. The widget 
    // will do its own validation and you cannot make any 
    // assumptions about what kind of widget has been used, 
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          if ($item['ebid'] != 0 && !is_numeric($item['ebid'])) {
            form_set_error($field['field_name'],t('"%ebid" is not a valid number',array('%ebid' => $item['ebid'])));
          }
        }
      }
      // TODO: Really better validation is needed here
      //       Should check that an Eventbrite event exists with that ID      
      return $items;

    // This is where you make sure that user-provided 
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $example = check_plain($item['ebid']);
        $items[$delta]['safe'] = $example;
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 * 
 * CCK has no way to know if something like a zero is
 * an empty value or a valid value, so return
 * TRUE or FALSE to a populated field $item array.
 * CCK uses this to remove empty multi-value elements
 * from forms.
 */
function eventbrite_cck_content_is_empty($item, $field) {
  if (empty($item['ebid'])) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
 
function eventbrite_cck_theme() {
  $path = drupal_get_path('module', 'eventbrite_cck');
  
  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );
  
  return array(
    'eventbrite_cck_formatter_default' => $base + array('arguments' => array('element' => NULL)),
    'eventbrite_cck_event' => $base + array('arguments' => array('event' => NULL), 'template' => 'eventbrite-cck-event'),
  );
}
/**
 * Implementation of hook_field_formatter_info().
 * 
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 * 
 */
function eventbrite_cck_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display 
      // fields screen.
      'label' => t('Title, date, and description'),
      // An array of the field types this formatter 
      // can be used on.
      'field types' => array('eventbrite_cck'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core 
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

