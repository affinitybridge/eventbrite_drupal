<?php
// $Id$

//==========================================//
// CORE HOOKS
//==========================================//

/**
 * Implementation of hook_init().
 * 
 * This hook will bring in the eventbrite_cck stylesheet
 */
function eventbrite_cck_init() {
  drupal_add_css(drupal_get_path('module', 'eventbrite_cck')  .'/eventbrite_cck.css');
}

/**
 * Implementation of hook_theme().
 */
function eventbrite_cck_theme() {
  $path = drupal_get_path('module', 'eventbrite_cck');
  
  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );
  
  return array(
    'eventbrite_cck_formatter_default' => $base + array(
      'arguments' => array('element' => NULL)
    ),
    'eventbrite_cck_event' => $base + array(
      'arguments' => array('event' => NULL),
      'template' => 'eventbrite-cck-event'
    ),
    'eventbrite_cck_event_id' => $base + array(
      'arguments' => array('element' => NULL),
    ),
    'eventbrite_cck_event_title' => $base + array(
      'arguments' => array('element' => NULL),
    ),
  );
}


//==========================================//
// CCK FIELD HOOKS
//==========================================//
/**
 * Implementation of hook_field_info().
 */
function eventbrite_cck_field_info() {
  return array(
    // Defining Eventbrite Event field
    'eventbrite_cck' => array(
      'label' => t('Eventbrite Event'),
      'description' => t('Associate an eventbrite event with a node.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function eventbrite_cck_field_settings($op, $field) {
  switch ($op) {
    /* 'form' and 'save' ops may not be needed for this field */
    // Create the form element to be used on the field 
    // settings form. Field settings will be the same for 
    // all shared instances of the same field and should 
    // define the way the value will be stored 
    // in the database.
    /*
    case 'form':
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        '#required' => FALSE,
        
        // Use #element_validate to validate the settings.
        '#element_validate' => array('_example_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be a number between 1 and 255'),
      );
      return $form;
    */
    // Return an array of the names of the field settings 
    // defined by this module. These are the items that 
    // CCK will store in the field definition
    // and they will be available in the $field array.
    // This should match the items defined in 'form' above.
    /*
    case 'save':
      return array('max_length');
    */
    // Define the database storage for this field using 
    // the same construct used by schema API. Most fields
    // have only one column, but there can be any number 
    // of different columns. After the schema API values, 
    // add two optional values to each column, 
    //  'views', to define a Views field 
    //  'sortable', to add a Views sort field
    case 'database columns':
      $columns['ebid'] = array(
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 0,
        'sortable' => TRUE, 
        'views' => TRUE,
      );
      return $columns;

    // Optional: Make changes to the default $data array 
    // created for Views. Omit this if no changes are 
    // needed, use it to add a custom handler or make 
    // other changes.
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. The following
      // code illustrates how you would retrieve
      // the necessary data.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_ebid'];

      // Make changes to $data as needed here.

      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function eventbrite_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. The widget 
    // will do its own validation and you cannot make any 
    // assumptions about what kind of widget has been used, 
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // TODO: verify these validation steps are working properly
          if (empty($item['ebid'])) {
          	continue;
          }
          if (!is_numeric($item['ebid'])) {
            form_set_error($field['field_name'], t('"%ebid" is not a valid number', array('%ebid' => $item['ebid'])));
            return false;
          }
          else {
            // Check to see that this is a gettable event
            if (!eventbrite_get('event_get', $item['ebid'])) {
              form_set_error($field['field_name'], t('"%ebid" is not a valid event id in the Eventbrite system', array('%ebid' => $item['ebid'])));
              return false;
            }
          }
        }
      }
      return $items;

    // This is where you make sure that user-provided 
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $example = check_plain($item['ebid']);
        $items[$delta]['safe'] = $example;
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 * 
 * CCK has no way to know if something like a zero is
 * an empty value or a valid value, so return
 * TRUE or FALSE to a populated field $item array.
 * CCK uses this to remove empty multi-value elements
 * from forms.
 */
function eventbrite_cck_content_is_empty($item, $field) {
  if (empty($item['ebid'])) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// CCK FIELD WIDGET HOOKS
//==========================================//

/**
 * Implementation of hook_widget_info().
 */
function eventbrite_cck_widget_info() {
  return array(
    // Event ID widget allows user to enter an Eventbrite event id into a textfield
    'eventbrite_cck_event_id' => array(
      'label' => t('Eventbrite ID Text field'),
      'field types' => array('eventbrite_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'description' => 'An Edit widget that takes the Eventbrite event id in a textfield',
    ),
    // Event Title widget allows user to eelect an Eventbrite event by title
    //   from a list of those events created with the Application Key user
    'eventbrite_cck_event_title' => array(
      'label' => t('Eventbrite Title Select box'),
      'field types' => array('eventbrite_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'description' => 'An Edit widget that takes the Eventbrite Event title in a select box',
    ),
  );
}

/**
 * Implementation of hook_elements().
 */
function eventbrite_cck_elements() {
  $elements = array(
    'eventbrite_cck_event_id' => array(
      '#input' => TRUE,
      '#process' => array('eventbrite_cck_event_id_widget_process' ),
      '#element_validate' => array('eventbrite_cck_event_widget_validate'),
    ),
    'eventbrite_cck_event_title' => array(
      '#input' => TRUE,
      '#process' => array('eventbrite_cck_event_title_widget_process'),
      '#element_validate' => array('eventbrite_cck_event_widget_validate'),
    ),
  );

  return $elements;
}

function eventbrite_cck_event_id_widget_process($element, $edit, &$form_state, $form) {
  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['ebid'] = array(
    '#title' => t( 'Eventbrite ID' ),
    '#type' => 'textfield',
    '#default_value' => $defaults['ebid'],
    '#size' => 16,
    '#maxlength' => 11,
    '#weight' => 0,
  );

  return $element;
}

function eventbrite_cck_event_title_widget_process($element, $edit, &$form_state, $form) {
  $defaults = $element['#value'][$element['#delta']];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // TODO: Turn this function into an Evenbrite module API method that returns an event list id => title
  $events = eventbrite_get('user_list_events');
  $options = array();
  $options[0] = '';
  foreach ($events as $event_id => $event) {
    $options[$event_id] = $event->title;
  }

  $element['ebid'] = array(
    '#title' => t( 'Eventbrite Event' ),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $defaults['ebid'],
    '#weight' => 0,
  );

  return $element;
}

function eventbrite_cck_event_widget_validate(&$element, &$form_state) {
  $event_id = $element['ebid']['#value'];
  if (empty($event_id)) {
    return;
  }

  $field = content_fields($element['#field_name'], $element['#type_name']);
  $ftitle = $field['widget']['label'];

  if (!is_numeric($event_id)) {
  	form_set_error(
      $element, 
      t(
        'The Eventbrite event id you entered (%ebid) for %field field is not numeric',
        array('%ebid' => $event_id, '%field' => $ftitle)
      )
    );
  }
  
  // Check to see that this is a gettable event
  if (!eventbrite_get('event_get', $event_id)) {
  	form_set_error(
      $element, 
      t(
        'The Eventbrite event id you entered (%ebid) for %field field is not a valid event id in the Eventbrite system',
        array('%ebid' => $event_id, '%field' => $ftitle)
      )
    );
    return false;
  }
  
}

/**
 * Implementation of hook_widget().
 */
function eventbrite_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // Define both Event ID and Event Title widgets
  switch ($field['widget']['type']) {
    case 'eventbrite_cck_event_id':
      $element = array(
        '#type' => 'eventbrite_cck_event_id',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
      );
      break;

    case 'eventbrite_cck_event_title':
      $element = array(
        '#type' => 'eventbrite_cck_event_title',
        '#default_value' => $items,
      );
      break;
  }
    
  return $element;
}


//==========================================//
// CCK FIELD FORMATTER HOOKS
//==========================================//
/**
 * Implementation of hook_field_formatter_info().
 */
function eventbrite_cck_field_formatter_info() {
  return array(
    // Default formatter (title, date, description)
    'default' => array(
      'label' => t('Title, date, and description'),
      'field types' => array('eventbrite_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

