<?php
// $Id$

/**
 * @file
 * An example to define a simple field, widget, and formatter.
 * A module could define only a field, only a widget, only a 
 * formatter, or any combination. Widgets and formatters must
 * declare what kind of field they work with, which can be any
 * existing field as well as any new field the module creates.
 *
 * Created using the article: http://www.lullabot.com/articles/creating-custom-cck-fields
 */

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function eventbrite_cck_simple_widget_info() {
  return array(
    'eventbrite_cck_simple_id' => array(
      // The human-readable label of the field that will be 
      // seen in the Manage fields screen.
      'label' => t('Eventbrite ID Text field'),
      // An array of the field types this widget can be 
      // used with.
      'field types' => array('eventbrite_cck'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that 
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has 
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'description' => 'An Edit widget that takes the Eventbrite Event ID in a texfield',
    ),
    'eventbrite_cck_simple_title' => array(
      // The human-readable label of the field that will be 
      // seen in the Manage fields screen.
      'label' => t('Eventbrite Title Select box'),
      // An array of the field types this widget can be 
      // used with.
      'field types' => array('eventbrite_cck'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that 
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has 
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'description' => 'An Edit widget that takes the Eventbrite Event title in a select box',
    ),
  );
}

/**
 * Implementation of hook_elements().
 */
function eventbrite_cck_simple_elements() {
  $elements = array(
    'eventbrite_cck_simple_id' => array(
      '#input' => TRUE,
      '#process' => array('eventbrite_cck_simple_id_widget_process' ),
//      '#element_validate' => array('eventbrite_cck_simple_widget_validate'),
    ),
    'eventbrite_cck_simple_title' => array(
      '#input' => TRUE,
      '#process' => array('eventbrite_cck_simple_title_widget_process'),
//      '#element_validate' => array('eventbrite_cck_simple_widget_validate'),
    ),
  );

  return $elements;
}

function eventbrite_cck_simple_id_widget_process($element, $edit, &$form_state, $form) {
drupal_set_message('should be in here');
  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['ebid'] = array(
    '#title' => t( 'Eventbrite ID' ),
    '#type' => 'textfield',
    '#default_value' => $defaults['ebid'],
    '#size' => 16,
    '#maxlength' => 11,
    '#weight' => 0,
  );

  return $element;
}

function eventbrite_cck_simple_title_widget_process($element, $edit, &$form_state, $form) {

  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // TODO: Get select list of event titles for this widget
  $element['ebid'] = array(
    '#title' => t( 'Eventbrite Event' ),
    '#type' => 'select',
    '#options' => array(),
    '#default_value' => $defaults['ebid'],
    '#weight' => 0,
  );

  return $element;
}

function eventbrite_cck_simple_widget_validate(&$element, &$form_state) {

  if (empty($element['ebid']['#value'])) {
    return;
  }

  $field = content_fields($element['#field_name'], $element['#type_name']);
  $ftitle = $field['widget']['label'];

  // TODO: If this eventbrite ID does not refer to an actual event
  if (0 /* try to get this event specifically and see if we can */) {
    form_error($element, t('The event you entered %field field does not exist.', array('%field' => $ftitle )));
  }
}

function theme_eventbrite_cck_simple_id(&$element) {
  return theme('form_element', $element, $element['#children']);
}

function theme_eventbrite_cck_simple_title($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_widget_settings().
 */
/*
function eventbrite_cck_simple_widget_settings($op, $widget) {
  switch ($op) {
    // Create the form element to be used on the widget 
    // settings form. Widget settings can be different 
    // for each shared instance of the same field and 
    // should define the way the value is displayed to 
    // the user in the edit form for that content type.
    
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      return $form;
    
    // Return an array of the names of the widget settings 
    // defined by this module. These are the items that 
    // CCK will store in the widget definition and they 
    // will be available in the $field['widget'] array.
    // This should match the items defined in 'form' above.
    case 'save':
      return array('size');
  }
}
*/
/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. 
 * 
 * CCK core fields only add a stub element and builds 
 * the complete item in #process so reusable elements 
 * created by hook_elements can be plugged into any 
 * module that provides valid $field information.
 * 
 * Custom widgets that don't care about using hook_elements
 * can be built out completely at this time.
 *
 * If there are multiple values for this field and CCK is 
 * handling multiple values, the content module will call 
 * this function as many times as needed.
 *
 * @param $form
 *   the entire form array, 
 *   $form['#node'] holds node information
 * @param $form_state
 *   the form_state, 
 *   $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of 
 *   subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function eventbrite_cck_simple_widget(&$form, &$form_state, $field, $items, $delta = 0) {
/* Not sure that switching between the widgets is needed here
  switch( $field['widget']['type'] ) {
	case 'eventbrite_cck_simple_id':
	  $element = array(
        '#type' => $field['widget']['type'],
        '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
      );
      break;

    case 'eventbrite_cck_simple_title':
      $element = array(
        '#type' => $field['widget']['type'],
        '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
      );
  	  break;
  }
  */
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  
  
  /* Don't think any of this is needed
	$element['value'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    //'#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'eventbrite_cck'),
    //'#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );
  
  // Used so that hook_field('validate') knows where to 
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );
  */
  
  return $element;
}


//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
 
function eventbrite_cck_simple_theme() {
  return array(
    // Themes for the formatters.
    'eventbrite_cck_simple_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
    'eventbrite_cck_simple_id' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 * 
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 * 
 */
function eventbrite_cck_simple_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    /* Remove this, is in the parent module
    'default' => array(
      // The human-readable label shown on the Display 
      // fields screen.
      'label' => t('Title, date, and description'),
      // An array of the field types this formatter 
      // can be used on.
      'field types' => array('eventbrite_cck'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core 
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    */
    /* This needs to be elaborated on
    'plain' => array(
      'label' => t('Plain text'),
      'field types' => array('eventbrite_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    */
  );
}

/**
 * Theme function for 'default' example field formatter.
 * 
 * $element['#item']: the sanitized $delta value for the item,
 * $element['#field_name']: the field name,
 * $element['#type_name']: the $node->type,
 * $element['#formatter']: the $formatter_name,
 * $element'#node']: the $node,
 * $element['#delta']: the delta of this item, like '0',
 * 
 */
/* Remove this, it is in the parent module
function theme_eventbrite_cck_simple_formatter_default($element) {
//	drupal_set_message('YAR!');
//	print_r($element['#item']);exit(4);
  print ($element['#item']['safe']);
  return $element['#item']['safe'];
}
*/

/**
 * Theme function for 'plain' example field formatter.
 */
/*
function theme_eventbrite_cck_simple_formatter_plain($element) {
  return strip_tags($element['#item']['safe']);
}
*/
