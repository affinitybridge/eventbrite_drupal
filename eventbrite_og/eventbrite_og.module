<?php
// $Id$

// TODO: Add eventbrite_og_requirements (copy from Eventbrite Blocks)

// Selective groups states. chosen by the group admin
define ('EVENTBRITE_OG_DISABLED', 0);
define ('EVENTBRITE_OG_SUBUSER', 1);
define ('EVENTBRITE_OG_CUSTOM', 2);

/**
 * Implementation of hook_menu().
 */
function eventbrite_og_menu() {
	/*
  $items['user/%/eventbrite'] = array(
    'title' => t('Eventbrite'),
    'description' => t('Configure personal Eventbrite settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['user/%/eventbrite/api'] = array(
    'title' => 'API Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  */
  $items['eventbrite_og/payment-settings/%node'] = array(
    // TODO: Add group name to title field
    'title' => t('Eventbrite default payment settings for group'),
    'description' => t('Default payment settings for Eventbrite events created within this group'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_og_default_payment_settings', 2),
    // TODO: Add group admin check for permissions
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
  
  
  $items['eventbrite_og/venues/%node'] = array(
    // TODO: Add group name to title field
    'title' => t('Eventbrite venues for group'),
    'description' => t('Venues for Eventbrite events created within this group'),
    'page callback' => 'eventbrite_og_venue_list',
    'page arguments' => array(2),
    // TODO: Add group admin check for permissions
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['eventbrite_og/%node/venues/list'] = array(
    // TODO: Add group name to title field
    'title' => t('List Venues'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  
  $items['eventbrite_og/%node/venues/add'] = array(
    'title' => 'Add Venue',
    'description' => 'Add an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  /*
  $items['eventbrite_og/%/venues/list-venues'] = array(
    'title' => 'List Venues',
    'description' => 'List Eventbrite venues',
    'page callback' => 'eventbrite_ui_venue_list',
//    'page arguments' => array('eventbrite_admin_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
//    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  */
/*
  $items['admin/settings/eventbrite/add-venue'] = array(
    'title' => 'Add Venue',
    'description' => 'Add an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/eventbrite/list-venues'] = array(
    'title' => 'List Venues',
    'description' => 'List Eventbrite venues',
    'page callback' => 'eventbrite_ui_venue_list',
//    'page arguments' => array('eventbrite_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  */
	/*
	
  $items['eventbrite_ui/events'] = array(
    'title' => t('Eventbrite Events'),
    'page callback' => 'eventbrite_ui_event_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['eventbrite_ui/new-event'] = array(
    'title' => t('Create a new Event'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_ui_event_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['eventbrite_ui/event/%'] = array(
    'title' => 'Single Eventbrite Event',
    'page callback' => 'eventbrite_ui_event',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['eventbrite_ui/event/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  $items['eventbrite_ui/event/%/edit'] = array(
    'title' => 'Edit Event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_ui_event_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite_ui.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  */
  
  return $items;
}

// venue id is 0 for new venues
function eventbrite_og_venue_form($form_state, $venue_id = 0) {
//  $payment_settings_form = eventbrite_ui_payment_settings_form();
//  return system_settings_form($payment_settings_form);
//drupal_set_message('yar'.$yar);
  og_set_group_context($group_node);
	
  module_load_include('inc', 'eventbrite_ui', 'eventbrite_ui.forms');
  $form = eventbrite_ui_payment_settings_form();
  
  return $form;
}

function eventbrite_og_venue_list($group_node) {
  og_set_group_context($group_node);

  module_load_include('inc', 'eventbrite', 'eventbrite.venue');
  
  return eventbrite_venue_list();
}

function eventbrite_og_default_payment_settings($form_state, $group_node) {
//  $payment_settings_form = eventbrite_ui_payment_settings_form();
//  return system_settings_form($payment_settings_form);
//drupal_set_message('yar'.$yar);
  og_set_group_context($group_node);
	
  module_load_include('inc', 'eventbrite_ui', 'eventbrite_ui.forms');
  $form = eventbrite_ui_payment_settings_form();
  
  return $form;
}

// TODO: This may not need to be in its own function after all, only call is in hook_nodeapi() load op
function _eventbrite_og_load($nid) {
  $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = %d', $nid);
  if ($row = db_fetch_object($result)) {
	return $row;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function eventbrite_og_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // If this node is a group type
  if (og_is_group_type($node->type)) {
    switch ($op) {
      case 'load':
//    	drupal_set_message('loading the node');
      	$node->eb_account = EVENTBRITE_OG_DISABLED;
      	if (isset($node->nid) && ($eventbrite_og = _eventbrite_og_load($node->nid))) {
          $node->eb_account = $eventbrite_og->account;
      	  $node->eb_custom_user_key = $eventbrite_og->custom_user_key;
      	  $node->eb_subuser_id = $eventbrite_og->subuser_id;
      	  $node->eb_subuser_key = $eventbrite_og->subuser_key;
      	}
        break;

      case 'prepare':
        break;

      case 'insert':
      case 'update':
        _eventbrite_og_group_submit($node);
        break;

      case 'delete':
        $sql = "DELETE FROM {eventbrite_og} WHERE nid = %d";
        db_query($sql, $node->nid);
        break;
    }
  }
}

function eventbrite_og_group_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;
  if (og_is_group_type($type)) {
  	// This is a group type so add form elements for eventbrite_og
    $form['#submit'][] = 'eventbrite_og_node_type_form_submit';  	
    drupal_set_message('what what?');
    $form['og']['eventbrite_og'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Eventbrite integration for Organic Groups'),
      '#options' => array(
        EVENTBRITE_OG_SUBUSER => t('Allow groups to create a subuser to manage their events'),
        EVENTBRITE_OG_CUSTOM => t('Allow groups to enter an Eventbrite user key to manage their events'),
      ),
      '#default_value' => variable_get('eventbrite_og_'.$type, array()),
      '#description' => t('You must enable at least one of these options in order to create events from within a group'),
      '#weight' => 10,
    );
  }
  
}

function eventbrite_og_node_type_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  variable_set('eventbrite_og_'.$form_values['type'], array_values($form_values['eventbrite_og']));
}

function eventbrite_og_get_account_options($type) {
  $account_options = array();
//  $allowed_options = variable_get('eventbrite_og_'.$type, array());
//  if (!empty($allowed_options)) {
  	$account_options[EVENTBRITE_OG_DISABLED] = t('Do not enable event management for this group');
  //	if (in_array(EVENTBRITE_OG_SUBUSER, $allowed_options)) {
  	  $account_options[EVENTBRITE_OG_SUBUSER] = t('Create a subuser account under the site\' Eventbrite account');
  //  }
  //  if (in_array(EVENTBRITE_OG_CUSTOM, $allowed_options)) {
      $account_options[EVENTBRITE_OG_CUSTOM] = t('Enter an Eventbrite user key to use as the Eventbrite account');
  //  }
//  }

  return $account_options;
}

function eventbrite_og_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node'])) {
    $node = $form['#node'];
    if ($form_id == $node->type.'_node_form' && og_is_group_type($node->type)) {
      $account_options = eventbrite_og_get_account_options($node->type);
      
      if ($account_options) {
	drupal_set_message('here');
      	$form['eventbrite_og'] = array(
          '#type' => 'fieldset',
          '#title' => t('Eventbrite Settings'),
        );

        $form['eventbrite_og']['eb_account'] = array(
          '#type' => 'radios',
          '#title' => t('Eventbrite Settings'),
          '#options' => $account_options,
          '#required' => 1,
          '#default_value' => $node->eb_account,
        );

        if (isset($account_options[EVENTBRITE_OG_CUSTOM])) {
          $form['eventbrite_og']['eb_user_key'] = array(
            '#type' => 'textfield',
            '#title' => t('Enter your user key'),
            '#description' => t('Link to find the user key'),
            '#default_value' => $node->eb_custom_user_key,
          );
        }

        $form['#validate'][] = 'eventbrite_og_group_node_validate';
      }
  	}
  }
}

function eventbrite_og_group_node_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  switch ($form_values['eb_account']) {
  	case EVENTBRITE_OG_CUSTOM:
  	  if (empty($form_values['eb_user_key'])) {
        form_set_error('eb_user_key', t('You must enter a user key when selecting that Eventbrite account option.'));
  	    return;
  	  }
  	  if (!eventbrite_get('user_get', $form_values['eb_user_key'])) {
        form_set_error('eb_user_key', t('The Eventbrite API is not accepting that user key.'));
  	    return;
   	  }
  	  break;
  }
}

function _eventbrite_og_group_submit($node) {
  // $node->nid will be set at this point
  $eventbrite_og = array(
    'nid' => $node->nid,
    'account' => $node->eb_account,
  );

  $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = %d', $node->nid);
  $db_row = db_fetch_object($result);

  // Switch on Group account types
  switch ($eventbrite_og['account']) {
  	case EVENTBRITE_OG_SUBUSER:
  	  // If this group does not have a subuser created already then create one
  	  if (empty($db_row->subuser_id)) {
        $subuser = new stdClass();

        // Build a fake email address to user for subuser
        // TODO: Where is this email going to come from?
        //       Maybe a hook could be written for custom modules to populate it
        // Remove non-email characters from group name
        $group_name = preg_replace('/[^A-Za-z0-9]+/', '_', $node->title);
        // TODO: Remove example.com, this is here so that it can be run locally
        $subuser->email = $group_name .'@'. 'example.com';//$_SERVER['SERVER_NAME'];
        $subuser->passwd = user_password(8);
  	  	
  	  	if ($new_subuser = eventbrite_save('user_new', $subuser)) {
  	  	  drupal_set_message('A new sub account was created on Eventbrite for this group.');
  	  	  $eventbrite_og['subuser_id'] = $new_subuser->id;
  	  	  $eventbrite_og['subuser_email'] = $subuser->email;
  	  	  $eventbrite_og['subuser_password'] = $subuser->email;
  	  	  $eventbrite_og['subuser_key'] = $new_subuser->user_key;
  	  	}
  	  	else {
  	  	  drupal_set_message('A new sub account could not be created on Eventbrite.');
  	  	}  	  	
  	  }
  	  break;
  	case EVENTBRITE_OG_CUSTOM:
  	  // This key will have been checked in the validation step
  	  $eventbrite_og['custom_user_key'] = $node->eb_user_key;
  	  break;
  }

  // Need to check if there is a row here already
  if ($db_row) {
    drupal_write_record('eventbrite_og', $eventbrite_og, 'nid');
  }
  else {
    drupal_write_record('eventbrite_og', $eventbrite_og);
  }
}

/**
* Implementation of hook_og_link_alter().
*/
function eventbrite_og_og_links_alter(&$links, $group_node) {
  // TODO: check if this is group admin
  // TODO: check if the right setting is enabled in the eventbrite group
  $links['eventbrite_og_venues'] = l('Group venues', 'eventbrite_og/venues/'. $group_node->nid);
  $links['eventbrite_og_payment_settings'] = l('Group payment settings', 'eventbrite_og/payment-settings/'. $group_node->nid);
}
/*
//'eventbrite_og/%/payment-settings'
function eventbrite_og_default_payment_settings() {
//  $payment_settings_form = eventbrite_ui_payment_settings_form();
//  return system_settings_form($payment_settings_form);
  module_load_include('inc', 'eventbrite_ui', 'eventbrite_ui.forms');
  $form = eventbrite_ui_payment_settings_form();
  
  return $form;
}
*/
  
/**
 * Implementation of hook_field_access().
 *
 * IF there is a group context and IF Eventbrite has not been enabled for this group,
 *   then boot the field
 */
function eventbrite_og_field_access($op, $field, $account, $node = NULL) {
  if ($field['type'] == 'eventbrite_cck') {
	switch ($op) {
      case 'view':
      case 'edit':
      	// Check if there is a group context
      	if (og_is_group_post_type($node->type) && ($group_node = og_get_group_context($node->type))) {
      	  // Do not show this field if the group node has not been Eventbrite-enabled.
      	  if ($group_node->eb_account == EVENTBRITE_OG_DISABLED) {
      	  	return FALSE;
      	  }
      	}
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_eventbrite_request_alter(&$request).
 */
function eventbrite_og_eventbrite_request_alter(&$request) {
  // Check if there is a group context
  if ($group_node = og_get_group_context()) {
  	// Check if eventbrite has been enabled for this group
    if ($group_node->eb_account != EVENTBRITE_OG_DISABLED) {
  	  switch ($request->op) {
  	  	case 'user_list_events':
  	  	case 'event_get':
        case 'event_new':
        case 'event_update':
        case 'ticket_new':
        case 'ticket_update':
        case 'user_list_venues':
          $request->module = 'eventbrite_og';
          switch ($group_node->eb_account) {
  	  	  	case EVENTBRITE_OG_CUSTOM:
  	  	  	  drupal_set_message('Replaced the user key with custom user key '. $group_node->custom_user_key .' on op '. $request->op);
  	  	  	  $request->user_key = $group_node->custom_user_key;
  	  	  	  break;
  	  	  	case EVENTBRITE_OG_SUBUSER:
  	  	  	  drupal_set_message('Replaced the user key with subuser key '. $group_node->subuser_key .' on op '. $request->op);
  	  	  	  $request->user_key = $group_node->subuser_key;
  	  	  	  break;
  	  	  }
  	  	  break;
  	  	default:
//  	  	  drupal_set_message('did not match the right op, so not replacing anything');  
  	  }
  	}
  }
}

